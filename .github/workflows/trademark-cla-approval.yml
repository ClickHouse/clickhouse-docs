name: CLA Approval Handler

on:
  issue_comment:
    types: [created]

permissions: write-all

jobs:
  process-cla-comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.actor != 'workflow-authentication-public[bot]'

    steps:
      - name: Generate Token
        id: generate-token
        continue-on-error: true
        uses: actions/create-github-app-token@v1
        with:
          app-id: "${{ secrets.WORKFLOW_AUTH_PUBLIC_APP_ID }}"
          private-key: "${{ secrets.WORKFLOW_AUTH_PUBLIC_PRIVATE_KEY }}"

      - name: Process CLA Agreement Comment
        id: process-comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token || secrets.GITHUB_TOKEN }}
          script: |
            // Only process comments on pull requests
            if (!context.payload.issue.pull_request) {
              console.log('Comment is not on a pull request, skipping...');
              return;
            }
            
            const prNumber = context.payload.issue.number;
            const commentBody = context.payload.comment.body;
            const commenter = context.payload.comment.user.login;
            
            console.log(`Processing comment on PR #${prNumber} from ${commenter}`);
            
            // Check if this is a CLA agreement comment
            const isClaAgreement = commentBody.includes('I agree to the Trademark License Addendum') && 
                                   commentBody.includes('CLA-SIGNATURE:');
            
            if (!isClaAgreement) {
              console.log('Comment is not a CLA agreement, skipping...');
              return;
            }
            
            console.log('Found CLA agreement comment, validating...');
            
            // Extract the signature from the comment
            const signatureMatch = commentBody.match(/CLA-SIGNATURE:\s*(\S+)/);
            if (!signatureMatch) {
              console.log('CLA signature format is invalid');
              return;
            }
            
            const signatureUser = signatureMatch[1];
            
            // Get PR details to verify the commenter is the PR author
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            const prAuthor = pr.user.login;
            console.log(`PR author: ${prAuthor}, commenter: ${commenter}, signature: ${signatureUser}`);
            
            // If someone other than PR author is trying to sign, silently ignore
            if (commenter !== prAuthor) {
              console.log(`Comment with CLA text from ${commenter} (not PR author ${prAuthor}), ignoring silently`);
              return;
            }
            
            // If PR author is signing but signature doesn't match their username, silently ignore
            if (signatureUser !== commenter) {
              console.log(`PR author ${commenter} used incorrect signature '${signatureUser}', ignoring silently`);
              return;
            }
            
            // Check if PR has trademark-addendum-required label
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const hasTrademarkRequired = labels.some(label => label.name === 'trademark-addendum-required');
            const hasTrademarkSigned = labels.some(label => label.name === 'trademark-addendum-signed');
            
            if (!hasTrademarkRequired) {
              console.log('PR does not have trademark-addendum-required label, skipping...');
              return;
            }
            
            if (hasTrademarkSigned) {
              console.log('PR already has trademark-addendum-signed label, skipping...');
              return;
            }
            
            console.log('Valid CLA agreement from PR author, processing...');
            
            // Remove blocking labels
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                name: 'trademark-addendum-required'
              });
              console.log('Removed trademark-addendum-required label');
            } catch (e) {
              console.log('trademark-addendum-required label not found or already removed');
            }
            
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                name: 'integrations-with-image-change'
              });
              console.log('Removed integrations-with-image-change label');
            } catch (e) {
              console.log('integrations-with-image-change label not found or already removed');
            }
            
            // Add trademark-addendum-signed label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: ['trademark-addendum-signed']
            });
            
            console.log('Added trademark-addendum-signed label successfully');
            
            // IMMEDIATELY record the signature in the same step
            console.log('=== Recording signature immediately ===');
            
            // Record signature using GitHub's REST API to create/update the file
            const currentDate = new Date().toISOString();
            const signaturesFilePath = 'contribute/trade-addendum-signatures.json';
            
            // Get existing signatures file if it exists
            let existingContent = { signatures: [] };
            try {
              const { data: existingFile } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: signaturesFilePath
              });
              
              const content = Buffer.from(existingFile.content, 'base64').toString('utf8');
              existingContent = JSON.parse(content);
              console.log('Found existing signatures file');
            } catch (error) {
              console.log('No existing signatures file found, creating new one');
              existingContent = { signatures: [] };
            }
            
            // Check if signature already exists for this user and PR
            const existingSignature = existingContent.signatures.find(sig => 
              sig.username === prAuthor && sig.pr_number === parseInt(prNumber)
            );
            
            if (!existingSignature) {
              // Add new signature
              const newSignature = {
                username: prAuthor,
                date: currentDate,
                pr_number: parseInt(prNumber),
                approved_by: prAuthor
              };
              
              existingContent.signatures.push(newSignature);
              console.log(`Adding new signature for ${prAuthor}`);
              
              // Create/update the file
              const updatedContent = JSON.stringify(existingContent, null, 2);
              const contentBase64 = Buffer.from(updatedContent).toString('base64');
              
              try {
                // Try to update existing file
                const { data: existingFile } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: signaturesFilePath
                });
                
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: signaturesFilePath,
                  message: `Add trademark addendum signature for @${prAuthor} (PR #${prNumber})\n\nThis signature was recorded automatically by the CLA approval workflow.`,
                  content: contentBase64,
                  sha: existingFile.sha
                });
              } catch (error) {
                // File doesn't exist, create it
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: signaturesFilePath,
                  message: `Add trademark addendum signature for @${prAuthor} (PR #${prNumber})\n\nThis signature was recorded automatically by the CLA approval workflow.`,
                  content: contentBase64
                });
              }
              
              console.log(`✅ Signature recorded successfully for ${prAuthor}`);
            } else {
              console.log(`ℹ️ Signature already exists for ${prAuthor} on PR #${prNumber}`);
            }
            
            // Add confirmation comment
            const confirmationBody = [
              '## Trademark license agreement confirmed ✅',
              '',
              `The trademark license agreement has been confirmed for @${prAuthor}.`,
              '',
              '**Status:** Confirmed',
              `**Date:** ${new Date().toISOString()}`,
              '**Method:** Self-signed agreement via comment',
              '',
              'This PR is now unblocked and can proceed with normal review.'
            ].join('\n');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: confirmationBody
            });
            
            console.log(`✅ CLA agreement processed successfully for ${prAuthor}`);
